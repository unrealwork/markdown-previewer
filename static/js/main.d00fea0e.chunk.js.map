{"version":3,"sources":["Editor.js","Preview.js","App.js","serviceWorker.js","index.js"],"names":["Editor","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","markdown","markdownChanged","bind","assertThisInitialized","inherits","createClass","key","value","e","setState","target","onMarkdownChange","react","id","className","placeholder","onChange","React","Preview","content","nextProps","dangerouslySetInnerHTML","__html","marked","App","handleMarkdown","md","react_default","a","createElement","Editor_Editor","Preview_Preview","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d00fea0e.chunk.js","sourcesContent":["import * as React from \"react\";\n\nexport class Editor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            markdown: props.markdown\n        };\n        this.markdownChanged = this.markdownChanged.bind(this);\n    }\n\n    markdownChanged(e) {\n        this.setState({\n            markdown: e.target.value\n        });\n        this.props.onMarkdownChange(e.target.value);\n    }\n\n    render() {\n        return (<div id={\"editorPanel\"}>\n            <textarea className=\"textarea\"\n                      id={\"editor\"}\n                      placeholder={\"Markdown\"}\n                      value={this.state.markdown}\n                      onChange={this.markdownChanged}/>\n        </div>);\n    }\n}","import * as React from \"react\";\nimport marked  from \"marked\";\n\nexport class Preview extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            content: props.content\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.content && nextProps.content !== this.props.content) {\n            this.setState({\n                content: nextProps.content\n            })\n        }\n    }\n\n\n    render() {\n        return (<div className={\"previewHolder\"}>\n            <div id={\"preview\"} className={\"content\"} dangerouslySetInnerHTML={{__html: marked(this.state.content)}}/>\n        </div>)\n    }\n}","import React, {Component} from 'react';\nimport './App.css';\nimport {Editor} from \"./Editor\";\nimport {Preview} from \"./Preview\"\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            markdown: `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`\n        };\n        this.handleMarkdown = this.handleMarkdown.bind(this);\n    }\n\n    handleMarkdown(md) {\n        this.setState({\n            markdown: md\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"App container is-fluid\">\n                <nav>\n                    <h2 className={\"title is-2\"}>Markdown Preview</h2>\n                </nav>\n                <hr className=\"navbar-divider\"/>\n                <div className={\"columns is-narrow panel\"}>\n                    <div className={\"column\"}>\n                        <Editor onMarkdownChange={this.handleMarkdown} markdown={this.state.markdown}/>\n                    </div>\n                    <div className={\"column\"}>\n                        <Preview content={this.state.markdown}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}